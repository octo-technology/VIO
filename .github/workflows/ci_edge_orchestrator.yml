name: CI edge_orchestrator
run-name: edge_orchestrator CI on branch >> ${{ github.ref_name }} <<

on:
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:
    paths:
      - 'supervisor/**'
  release:
    types:
      - created

env:
  REGISTRY: ghcr.io

jobs:
  lint_and_test_on_edge_orchestrator:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.8", "3.9" ] # TODO: add 3.10 and 3.11
    services:
      mongo:
        image: mongo:5.0.2
        ports:
          - 27017:27017
      model_serving:
        image: ghcr.io/octo-technology/vio/edge_model_serving:ci-cd-github-actions
        ports:
          - 8501:8501
      tflite_serving:
        image: ghcr.io/octo-technology/vio/edge_tflite_serving:ci-cd-github-actions
        ports:
          - 8502:8501
    env:
      DATABASE_CONNECTION_URL: mongodb://localhost:27017
      TENSORFLOW_SERVING_HOST: localhost
      TENSORFLOW_SERVING_PORT: 8501
      TFLITE_SERVING_HOST: localhost
      TFLITE_SERVING_PORT: 8502
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make install
        working-directory: ./supervisor

      - name: Lint with flake8
        run: make lint
        working-directory: ./supervisor

      - name: Run unit tests
        run: make unit_tests
        working-directory: ./supervisor

      - name: Upload unit test report
        uses: dorny/test-reporter@v1
        if: ${{ always() }}
        with:
          name: Unit tests report in Python ${{ matrix.python-version }}
          path: supervisor/reports/pytest/unit-tests-report.xml
          reporter: java-junit

      - name: Run integration tests
        run: make integration_tests
        working-directory: ./supervisor

      - name: Upload integration test report
        uses: dorny/test-reporter@v1
        if: ${{ always() }}
        with:
          name: Integration tests report in Python ${{ matrix.python-version }}
          path: supervisor/reports/pytest/integration-tests-report.xml
          reporter: java-junit

      - name: Run functional tests
        run: make functional_tests
        working-directory: ./supervisor

      - name: Upload functional test report
        uses: dorny/test-reporter@v1
        if: ${{ always() }}
        with:
          name: Functional tests report in Python ${{ matrix.python-version }}
          path: supervisor/reports/behave/*.xml
          reporter: java-junit

  build_and_push_images:
    name: Push Docker image to multiple registries
    needs: lint_and_test_on_edge_orchestrator
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./supervisor/Dockerfile
            image: ghcr.io/${{ github.repository }}/edge_orchestrator
            context: ./supervisor
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          flavor: latest=auto

      - name: Build and push Docker images
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
