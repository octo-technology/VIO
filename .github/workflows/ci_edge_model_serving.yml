name: CI edge_model_serving
run-name: edge_model_serving CI on branch >> ${{ github.ref_name }} <<

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - 'edge_model_serving/**'

env:
  REGISTRY: ghcr.io

jobs:
  lint_and_test_on_edge_model_serving:
    name: Run Python linter and tests (unit > integration > functional)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.7", "3.8" ] # TODO: add 3.9, 3.10 and 3.11
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make install_tflite_dependencies_linux
        working-directory: ./edge_model_serving

      - name: Lint with flake8
        run: make lint
        working-directory: ./edge_model_serving

      - name: Run unit tests
        run: make tflite_tests
        working-directory: ./edge_model_serving

      - name: Upload unit test report
        uses: dorny/test-reporter@v1
        if: ${{ always() }}
        with:
          name: Unit tests report in Python ${{ matrix.python-version }}
          path: edge_model_serving/tflite_serving/reports/tests-report.xml
          reporter: java-junit

  build_and_push_images:
    name: Build and push Docker images to multiple registries
    needs: lint_and_test_on_edge_model_serving
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./edge_model_serving/tflite_serving/Dockerfile
            image: ghcr.io/${{ github.repository }}/edge_tflite_serving
            context: ./edge_model_serving
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
          flavor: latest=auto

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  build_and_push_arm_images:
    name: Build and push Docker ARM images to multiple registries
    needs: lint_and_test_on_edge_model_serving
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./edge_model_serving/tflite_serving/Dockerfile.raspberrypi
            image: ghcr.io/${{ github.repository }}/edge_tflite_serving.raspberrypi
            context: ./edge_model_serving
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
          flavor: latest=auto

      - name: Set up Docker Buildx (multi-platform build)
        uses: docker/setup-buildx-action@v2

      - name: Build and push (if not PR)
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
